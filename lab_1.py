# -*- coding: utf-8 -*-
"""Lab 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y0SBOynO7FT3MjPunLLhEAxE00Ye44fu

# ***Lab 1: Reasoning and Proof Models***

## **Exercise 1:** Models of Argument

* **Goal:** Identify claims, evidence, and warrants from text

* **Activity:** Extract arguments from text using simple rule-based NLP
"""

# Install if needed
# !pip install spacy

import spacy
nlp = spacy.load("en_core_web_sm")

text = "The model is biased because it misclassifies 70% of sentences with gendered pronouns."

doc = nlp(text)

for sent in doc.sents:
    print(f"Sentence: {sent.text}")
    # Simple keyword-based detection
    if "because" in sent.text:
        claim, evidence = sent.text.split("because")
        print(f"Claim: {claim.strip()}")
        print(f"Evidence: {evidence.strip()}")

"""## **Exercise 2:** Proof by Demonstration

* **Goal:** Demonstrate that an algorithm works with a specific example

* **Activity:** Sentiment analysis demonstration
"""

# Using TextBlob for demonstration
# !pip install textblob
from textblob import TextBlob

texts = ["I love this movie!", "This is terrible."]
for t in texts:
    sentiment = TextBlob(t).sentiment.polarity
    label = "Positive" if sentiment > 0 else "Negative"
    print(f"Text: '{t}' --> Sentiment: {label}")

"""## **Exercise 3:** Proof by Empirical Method

* **Goal:** Validate model performance on a dataset

* **Activity:** Train a small NLP classifier and evaluate
"""

# Proof by Empirical Method - Fixed Code
# Ensure required libraries are installed:
# !pip install scikit-learn pandas

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score

# Example dataset (make sure at least 2 samples per class)
data = pd.DataFrame({
    "text": [
        "I love NLP", "I hate bugs", "Python is great", "Debugging is annoying",
        "AI is amazing", "Errors are frustrating"
    ],
    "label": [1, 0, 1, 0, 1, 0]
})

# Stratified split ensures both classes in train and test sets
X_train, X_test, y_train, y_test = train_test_split(
    data['text'], data['label'], test_size=0.33, random_state=42, stratify=data['label']
)

# Vectorize text using TF-IDF
vectorizer = TfidfVectorizer()
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Train Logistic Regression classifier
clf = LogisticRegression()
clf.fit(X_train_tfidf, y_train)

# Predict on test set
y_pred = clf.predict(X_test_tfidf)

# Evaluate performance
accuracy = accuracy_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("=== Proof by Empirical Method ===")
print(f"Train texts:\n{X_train.tolist()}")
print(f"Test texts:\n{X_test.tolist()}\n")
print(f"Predictions: {y_pred.tolist()}")
print(f"Accuracy: {accuracy:.2f}")
print(f"F1 Score: {f1:.2f}")

"""## **Exercise 4:** Mathematical Proof

* **Goal:** Verify an algorithmâ€™s correctness mathematically

* **Activity:** Verify edit distance computation using dynamic programming
"""

def edit_distance(s1, s2):
    n, m = len(s1), len(s2)
    dp = [[0]*(m+1) for _ in range(n+1)]

    for i in range(n+1):
        for j in range(m+1):
            if i == 0: dp[i][j] = j
            elif j == 0: dp[i][j] = i
            elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1]
            else: dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])
    return dp[n][m]

# Demonstration
s1, s2 = "kitten", "sitting"
print(f"Edit distance between '{s1}' and '{s2}' is {edit_distance(s1, s2)}")

"""## **Exercise 5:** Proof by Hermeneutics

* **Goal:** Interpret NLP model outputs qualitatively

* **Activity:** Examine chatbot responses for empathy
"""

responses = [
    "I understand your feelings.",
    "That does not make sense.",
    "Tell me more about your day."
]

for r in responses:
    if "understand" in r or "Tell me more" in r:
        interpretation = "Empathetic"
    else:
        interpretation = "Neutral/Non-Empathetic"
    print(f"Response: '{r}' --> Interpretation: {interpretation}")

