# -*- coding: utf-8 -*-
"""Lab 5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a9hDpqlxCxqkz3drkXqeXHx_xFNKIbAm

# ***Lab 5: Applied Low-Tech NLP***

# **Exercise 1:** Lecxicons
"""

# -----------------------------
# Lexicon-Based Sentiment Analysis in Business Reviews
# -----------------------------

# Sample business reviews (e.g., from an e-commerce store)
reviews = [
    "The product quality is excellent and delivery was fast.",
    "Customer support was not helpful at all.",
    "The price is okay, but the service is very slow.",
    "Absolutely love the product! Great value for money.",
    "Terrible experience, I will never buy again."
]

# 1. Define a simple sentiment lexicon
sentiment_lexicon = {
    "excellent": 3, "fast": 2, "helpful": 2, "okay": 1, "slow": -2,
    "love": 3, "great": 2, "value": 2, "terrible": -3, "never": -2,
    "bad": -2, "good": 2, "happy": 2, "poor": -2, "amazing": 3
}

negation_words = {"not", "never", "no", "none", "nobody"}

# 2. Function to calculate sentiment score
def lexicon_sentiment_analysis(text, lexicon):
    words = text.lower().split()
    score = 0
    negate = False

    for word in words:
        if word in negation_words:
            negate = True
            continue

        if word in lexicon:
            word_score = lexicon[word]
            if negate:
                word_score *= -1
                negate = False
            score += word_score

    # Sentiment classification
    if score > 1:
        sentiment = "Positive"
    elif score < -1:
        sentiment = "Negative"
    else:
        sentiment = "Neutral"

    return score, sentiment

# 3. Apply analysis to business reviews
print("Business Reviews Sentiment Analysis:\n")
for review in reviews:
    score, sentiment = lexicon_sentiment_analysis(review, sentiment_lexicon)
    print(f"Review: {review}")
    print(f" â†’ Sentiment Score: {score}, Classification: {sentiment}\n")

"""# **Exercise 2:** Bag of Words (BoW)"""

# -----------------------------
# Bag of Words in NLP (Business Example)
# -----------------------------

from sklearn.feature_extraction.text import CountVectorizer
import pandas as pd

# Sample business reviews (e.g., from an online store)
reviews = [
    "The product quality is excellent",
    "Delivery was fast and service was great",
    "Customer support was not helpful",
    "The price is reasonable and quality is good",
    "Terrible product, I will never buy again"
]

# 1. Initialize CountVectorizer
vectorizer = CountVectorizer()

# 2. Fit and transform the reviews into Bag of Words
X = vectorizer.fit_transform(reviews)

# 3. Convert to DataFrame for readability
bow_df = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names_out())

# Show results
print("Bag of Words Representation:\n")
print(bow_df)

"""## **Exercise 3:** Cosine Similarity"""

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd

# Example customer reviews (real-world business context)
documents = [
    "The product quality is excellent and delivery was fast",
    "Fast delivery and excellent customer service",
    "The product was okay but the delivery was late",
    "Customer service was poor and the product quality was bad"
]

# Step 1: Convert text into Bag of Words vectors
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(documents)

# Step 2: Compute cosine similarity matrix
cosine_sim_matrix = cosine_similarity(X, X)

# Step 3: Display results in table format
df_similarity = pd.DataFrame(cosine_sim_matrix,
                             index=[f"Doc{i+1}" for i in range(len(documents))],
                             columns=[f"Doc{i+1}" for i in range(len(documents))])

print("Cosine Similarity Matrix:")
print(df_similarity.round(2))

"""## **Exercise 4:** TF-IDF"""

from sklearn.feature_extraction.text import TfidfVectorizer
import pandas as pd

# Example real-world business scenario: customer reviews
documents = [
    "The product quality is excellent and delivery was fast",
    "Fast delivery and excellent customer service",
    "The product was okay but the delivery was late",
    "Customer service was poor and the product quality was bad"
]

# Step 1: Initialize TF-IDF Vectorizer
vectorizer = TfidfVectorizer()

# Step 2: Fit and transform documents
X = vectorizer.fit_transform(documents)

# Step 3: Convert to DataFrame
df_tfidf = pd.DataFrame(X.toarray(),
                        columns=vectorizer.get_feature_names_out(),
                        index=[f"Doc{i+1}" for i in range(len(documents))])

print("TF-IDF Matrix:")
print(df_tfidf.round(3))

